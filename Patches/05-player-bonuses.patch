diff --git a/RL2-Source/PlayerController.cs b/Assembly-CSharp/PlayerController.cs
index 7ea9580..de800cd 100755
--- a/RL2-Source/PlayerController.cs
+++ b/Assembly-CSharp/PlayerController.cs
@@ -8,6 +8,7 @@ using Rewired;
 using SceneManagement_RL;
 using Sigtrap.Relays;
 using UnityEngine;
+using RL2.ModLoader;
 
 public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEnterHitResponse, IHitResponse, IHasProjectileNameArray, IAudioEventEmitter
 {
@@ -33,6 +34,8 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 
 	private int m_baseVitality;
 
+	public PlayerBonuses playerBonuses;
+
 	private CharacterDash_RL m_characterDash;
 
 	private CharacterDownStrike_RL m_characterDownStrike;
@@ -209,7 +212,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 			{
 				num2 = 2.5f;
 			}
-			return Mathf.Clamp((num2 + ResolveAdd) * (1f + ResolveMod), num, float.MaxValue);
+			return Mathf.Clamp((num2 + ResolveAdd + playerBonuses.resolveBonus) * (1f + ResolveMod), num, float.MaxValue);
 		}
 	}
 
@@ -237,7 +240,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 	{
 		get
 		{
-			float num = Mathf.Clamp((BaseDexterity + DexterityAdd + DexterityTemporaryAdd) * (1f + DexterityMod + DexterityTemporaryMod), 0f, float.MaxValue);
+			float num = Mathf.Clamp((BaseDexterity + DexterityAdd + DexterityTemporaryAdd + playerBonuses.dexterityBonus) * (1f + DexterityMod + DexterityTemporaryMod), 0f, float.MaxValue);
 			if (ChallengeManager.IsInChallenge)
 			{
 				num = ChallengeManager.ApplyStatCap(num, isDexterityOrFocus: true);
@@ -272,7 +275,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 		}
 	}
 
-	public override float ActualCritDamage => Mathf.Clamp(BaseCritDamage + CritDamageAdd + CritDamageTemporaryAdd, 0f, float.MaxValue);
+	public override float ActualCritDamage => Mathf.Clamp(BaseCritDamage + CritDamageAdd + CritDamageTemporaryAdd + playerBonuses.critDamageBonus, 0f, float.MaxValue);
 
 	public virtual float CritDamageAdd { get; set; }
 
@@ -294,7 +297,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 	{
 		get
 		{
-			float num = Mathf.Clamp((BaseFocus + FocusAdd + FocusTemporaryAdd) * (1f + FocusMod + FocusTemporaryMod), 0f, float.MaxValue);
+			float num = Mathf.Clamp((BaseFocus + FocusAdd + FocusTemporaryAdd + playerBonuses.focusBonus) * (1f + FocusMod + FocusTemporaryMod), 0f, float.MaxValue);
 			if (ChallengeManager.IsInChallenge)
 			{
 				num = ChallengeManager.ApplyStatCap(num, isDexterityOrFocus: true);
@@ -329,7 +332,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 		}
 	}
 
-	public float ActualMagicCritDamage => Mathf.Clamp(BaseMagicCritDamage + MagicCritDamageAdd + MagicCritDamageTemporaryAdd, 0f, float.MaxValue);
+	public float ActualMagicCritDamage => Mathf.Clamp(BaseMagicCritDamage + MagicCritDamageAdd + MagicCritDamageTemporaryAdd + playerBonuses.magicCritDamageBonus, 0f, float.MaxValue);
 
 	public float MagicCritDamageAdd { get; set; }
 
@@ -359,7 +362,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 		}
 	}
 
-	public int ActualArmor => Mathf.Clamp(BaseArmor + ArmorAdds, 0, int.MaxValue);
+	public int ActualArmor => Mathf.Clamp(BaseArmor + ArmorAdds + playerBonuses.armorBonus, 0, int.MaxValue);
 
 	public int ArmorAdds { get; set; }
 
@@ -379,7 +382,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 	{
 		get
 		{
-			float num = base.ActualStrength;
+			float num = base.ActualStrength + playerBonuses.strengthBonus;
 			if (ChallengeManager.IsInChallenge)
 			{
 				num = ChallengeManager.ApplyStatCap(num);
@@ -393,7 +396,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 	{
 		get
 		{
-			float num = base.ActualMagic;
+			float num = base.ActualMagic + playerBonuses.inteligenceBonus;
 			if (ChallengeManager.IsInChallenge)
 			{
 				num = ChallengeManager.ApplyStatCap(num);
@@ -425,7 +428,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 	{
 		get
 		{
-			int num = BaseVitality + VitalityAdd;
+			int num = BaseVitality + VitalityAdd + playerBonuses.vitalityBonus;
 			num = Mathf.CeilToInt((float)num * (1f + VitalityMod));
 			if (ChallengeManager.IsInChallenge)
 			{
@@ -457,7 +460,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 			float relicMaxHealthMod = RelicMaxHealthMod;
 			float maxHealthMod = base.MaxHealthMod;
 			float num = 1f;
-			num += traitMaxHealthMod + relicMaxHealthMod + maxHealthMod;
+			num += traitMaxHealthMod + relicMaxHealthMod + maxHealthMod + playerBonuses.healthBonus;
 			float num2 = Mathf.Clamp(1f - ActualResolve, 0f, 1f);
 			num2 *= 1f;
 			int num3 = 150;
@@ -477,7 +480,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 
 	public int ClassModdedMaxMana => Mathf.CeilToInt((float)BaseMaxMana * CharacterClass.ClassData.PassiveData.MaxManaMod * (1f + EquipmentMaxManaMod));
 
-	public int ActualMaxMana => Mathf.Clamp(Mathf.CeilToInt((float)ClassModdedMaxMana * (1f + TraitMaxManaMod)) + PostModMaxManaAdd, 1, int.MaxValue);
+	public int ActualMaxMana => Mathf.Clamp(Mathf.CeilToInt((float)ClassModdedMaxMana * (1f + TraitMaxManaMod)) + PostModMaxManaAdd + playerBonuses.manaBonus, 1, int.MaxValue);
 
 	public int PostModMaxManaAdd { get; set; }
 
@@ -528,7 +531,7 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 		}
 	}
 
-	public float ActualMovementSpeed => m_characterMove.MovementSpeed;
+	public float ActualMovementSpeed => m_characterMove.MovementSpeed + playerBonuses.movementSpeedBonus;
 
 	public float MovementSpeedMod
 	{
