<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RL2.ModLoader</name>
    </assembly>
    <members>
        <member name="T:RL2.ModLoader.ModLoader">
            <summary>
            Main entrypoint of the mod loader
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.ShowInstalledMods(System.String[])">
            <summary>
            Writes the loaded mods to the logs and console
            </summary>
            <param name="args"></param>	
        </member>
        <member name="M:RL2.ModLoader.ModLoader.CreateMod(System.String[])">
            <summary>
            Creates base source files for a new independent mod
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.CreateCsproj(System.String)">
            <summary>
            Creates a new independent mod .csproj file
            </summary>
            <param name="path">Full file path with extension</param>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.CreateModManifest(System.String,System.String,System.String)">
            <summary>
            Creates a new .mod.json file
            </summary>
            <param name="modName"></param>
            <param name="author"></param>
            <param name="newModPath">Full file path with extension</param>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.CreateModEntrypointFile(System.String,System.String)">
            <summary>
            Creates a new .cs file for the independent mod
            </summary>
            <param name="modName"></param>
            <param name="path">Full file path with extension</param>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.OnGameLoad">
            <summary>
            Provides an endpoint for mods not using the RL2.API by trigering the OnLoad event
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.OnGameUnload">
            <summary>
            Provides an endpoint for mods not using the RL2.API by trigering the OnUnload event
            </summary>
        </member>
        <member name="E:RL2.ModLoader.ModLoader.OnLoad">
            <summary>
            Event ran after the whole game is loaded
            </summary>
        </member>
        <member name="E:RL2.ModLoader.ModLoader.OnUnload">
            <summary>
            Event ran before the whole game is unloaded
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ConsoleHook">
            <summary>
            Attaches a <see cref="T:RL2.ModLoader.Console"/> component to the <see cref="T:GameManager"/>
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ModLoaderVersion">
            <summary>
            <see href="SemVersion"/> object representing the modloaders version
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ModPath">
            <summary>
            Path to directory containing all mods
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ModListPath">
            <summary>
            Path to the file containing the enabled/disabled mods list
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ModList">
            <summary>
            Stores lists of enabled/disabled mods
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.ModManifestToPath">
            <summary>
            Stores all mod manifests and their paths
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.LoadedModNamesToVersions">
            <summary>
            Stores names of all loaded mods
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModLoader.IndependentModObjects">
            <summary>
            Stores all independent mods
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.Initialize">
            <summary>
            Initializes the modloader
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.EnsureModsDirectorysExists">
            <summary>
            Ensures that the "Mods" directory exists
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.CreateModList">
            <summary>
            Loads the <see cref="F:RL2.ModLoader.ModLoader.ModList"/> object
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.LoadModManifests">
            <summary>
            Fills the ModManifests list as well as the ModManifestPaths dictionary with found entries
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.LoadMods">
            <summary>
            Loads mods
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.LogLoaded">
            <summary>
            Logs all loaded mods
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModLoader.Log(System.Object)">
            <summary>
            Logs the message with "[RL2-Modloader]: " prepended
            </summary>	
            <param name="message">The message to log</param>
        </member>
        <member name="T:RL2.ModLoader.CommandAttribute">
            <summary>
            Marks a method as a console command.
            </summary>
        </member>
        <member name="M:RL2.ModLoader.CommandAttribute.#ctor">
            <summary>
            Block access to the parameterless constructor
            </summary>
        </member>
        <member name="F:RL2.ModLoader.CommandAttribute.CommandName">
            <summary>
            The name of the command
            </summary>
        </member>
        <member name="M:RL2.ModLoader.CommandAttribute.#ctor(System.String)">
            <summary>
            Register the method below as a command.
            </summary>
            <param name="name">The name of the command. Advised to use "ModName:CommandName" to avoid as many conflicts as possible</param>
            <remarks>The marked method must be <see langword="static"/>!</remarks>
        </member>
        <member name="T:RL2.ModLoader.CommandManager">
            <summary>
            Manages all commands
            </summary>
        </member>
        <member name="F:RL2.ModLoader.CommandManager.Commands">
            <summary>
            Stores all commands
            </summary>
        </member>
        <member name="M:RL2.ModLoader.CommandManager.RegisterCommands(System.Reflection.Assembly)">
            <summary>
            Register all commands from the provided assembly.
            </summary>
            <param name="assembly">The assembly to be scanned for commands</param>
        </member>
        <member name="M:RL2.ModLoader.CommandManager.RunCommand(System.String)">
            <summary>
            Runs the command with the provided arguments
            </summary>
            <param name="command">string representing the command and it's arguments</param>
        </member>
        <member name="T:RL2.ModLoader.Console">
            <summary>
            A component representing the in game console
            </summary>
        </member>
        <member name="T:RL2.ModLoader.ModList">
            <summary>
            A class representing the enabled/disabled mods config
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModList.Enabled">
            <summary>
            List of names of enabled mods
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModList.Disabled">
            <summary>
            List of names of disabled mods
            </summary>
        </member>
        <member name="T:RL2.ModLoader.ModManifest">
            <summary>
            Decalres the base info about the mod. A JSON file containing this information has a "*.mod.json" extension
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModManifest.Name">
            <summary>
            Mod name
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModManifest.Author">
            <summary>
            Mod author
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModManifest.Version">
            <summary>
            Mod version. Must follow the <see href="https://semver.org/">symantic versioning scheme</see>
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModManifest.ModAssembly">
            <summary>
            Relative path from the mod manifest to the mods assembly
            </summary>
        </member>
        <member name="F:RL2.ModLoader.ModManifest.LoadAfter">
            <summary>
            List of all mod names which take priority in loading
            </summary>
        </member>
        <member name="P:RL2.ModLoader.ModManifest.SemVersion">
            <summary>
            Version of the mod as a semantic version object
            </summary>
        </member>
        <member name="M:RL2.ModLoader.ModManifest.CompareTo(RL2.ModLoader.ModManifest)">
            <summary>
            Compares to ModManifest objects
            </summary>
            <param name="comparedObject"></param>
            <returns></returns>
        </member>
        <member name="T:RL2.ModLoader.SemVersion">
            <summary>
            A class representing a semantic versioning string
            </summary>
        </member>
        <member name="F:RL2.ModLoader.SemVersion.Major">
            <summary>
            Major version
            </summary>
        </member>
        <member name="F:RL2.ModLoader.SemVersion.Minor">
            <summary>
            Minor version
            </summary>
        </member>
        <member name="F:RL2.ModLoader.SemVersion.Patch">
            <summary>
            Patch version
            </summary>
        </member>
        <member name="F:RL2.ModLoader.SemVersion.ReleaseType">
            <summary>
            Release type
            </summary>
        </member>
        <member name="F:RL2.ModLoader.SemVersion.BuildVersion">
            <summary>
            Build version
            </summary>
        </member>
        <member name="M:RL2.ModLoader.SemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new SemVersion object
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="patch">Patch version</param>
            <param name="releaseType">Release type</param>
            <param name="buildVersion">Build version</param>
        </member>
        <member name="M:RL2.ModLoader.SemVersion.#ctor(System.String)">
            <summary>
            Converts semantic version string into a SemVersion object <br></br>
            Throws if the provided <see langword="string"/> is not a valid semantic versioning string
            </summary>
            <param name="version"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:RL2.ModLoader.SemVersion.ToString">
            <summary>
            
            </summary>
            <returns>A semantic versioning string</returns>
        </member>
        <member name="M:RL2.ModLoader.SemVersion.CompareTo(RL2.ModLoader.SemVersion)">
            <summary>
            Compares to SemVersion objects
            </summary>
            <param name="other"></param>
            <returns>-1 if this object precedes the other<br></br>0 if both objects are equal<br></br>1 if this objects succedes the other</returns>
        </member>
        <member name="T:RL2.ModLoader.TextureExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:RL2.ModLoader.TextureExtension.ConvertToReadable(UnityEngine.Texture2D)">
            <summary>
            Converts a texture which has isReadable set to false
            </summary>
            <param name="texture">Texture you want to convert</param>
            <returns>A readable version of the texture</returns>
        </member>
        <member name="M:RL2.ModLoader.TextureExtension.LoadTexture(System.String)">
            <summary>
            Loads texture from disk
            </summary>
            <param name="path">Path to the texture</param>
            <returns>The texture</returns>
        </member>
        <member name="T:ModEntrypointAttribute">
            <summary>
            Marks the independant mods main entrypoint<br/>
            Used on the class. Initialization of the class is handled by a parameterleess constructor
            </summary>
        </member>
        <member name="M:ModEntrypointAttribute.#ctor">
            <summary>
            <inheritdoc cref="T:ModEntrypointAttribute"/>
            </summary>
        </member>
        <member name="T:Rewired.Utils.Libraries.TinyJson.JsonExtensions">
            <summary>
            JSON related extension methods
            </summary>
        </member>
        <member name="M:Rewired.Utils.Libraries.TinyJson.JsonExtensions.Prettify(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <param name="indent"></param>
            <returns>Prettified version of the provided JSON string</returns>
        </member>
    </members>
</doc>
