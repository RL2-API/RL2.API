diff --git a/RL2-Source/PlayerController.cs b/Assembly-CSharp/PlayerController.cs
index cbcba94..f156207 100644
--- a/RL2-Source/PlayerController.cs
+++ b/Assembly-CSharp/PlayerController.cs
@@ -754,6 +754,12 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 
 	private void LateUpdate()
 	{
+		statBonuses.ResetAll();
+		ModPlayer[] modPlayers = gameObject.GetComponents<ModPlayer>();
+		foreach(ModPlayer modPlayer in modPlayers)
+		{
+			modPlayer.PreUpdate();
+		}
 		if (m_updateAccumulatedXP > 0f)
 		{
 			if ((bool)m_xpPopup && m_xpPopup.gameObject.activeSelf)
@@ -774,6 +780,16 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 			TextPopupManager.DisplayTextDefaultPos(TextPopupType.HPGained, text2, this, attachToSource: true);
 			m_updateAccumulatedLifeSteal = 0f;
 		}
+		foreach (ModPlayer modPlayer in modPlayers)
+		{
+			modPlayer.ModifyStats();
+		}
+		InitializeAbilities();
+		InitializeAllMods(resetHP: false, resetMP: false);
+		foreach (ModPlayer modPlayer in modPlayers)
+		{
+			modPlayer.PostUpdate();
+		}
 	}
 
 	protected override void OnJustGrounded()
@@ -846,6 +862,10 @@ public class PlayerController : BaseCharacterController, IDamageObj, IWeaponOnEn
 		m_onRelicChanged = OnRelicChanged;
 		m_applyPermanentStatusEffects = ApplyPermanentStatusEffects;
 		m_onHouseRulesChanged = OnHouseRulesChanged;
+		foreach(Type modPlayer in ModLoader.LoadedModPlayers)
+		{
+			gameObject.AddComponent(modPlayer);
+		}
 	}
 
 	public override void ResetBaseValues()
